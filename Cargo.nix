# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "scape/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
}:
let
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
in let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    scape = rustPackages.unknown.scape."0.0.1";
  };
  "registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".appendlist."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "appendlist";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e149dc73cd30538307e7ffa2acd3d2221148eaeed4871f246657b1c3eaa1cbd2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f2a05fd1bd10b2527e20a2cd32d8873d115b8b39fe219ee25f42a8aca6ba278"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "arc-swap";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bddcadddf5e9015d310179a59bb28c4d4b9920ad0f11e8e14dbadf654890c9a6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "atty";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "block";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.11.1" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "572f695136211188308f16ad2ca5c851a712c464060ae6974944458eb83880ba"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.12.3" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck";
    version = "1.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aaa3a8d9a1ca92e282c96a32d6511b695d7d994d1d102ba85d279f9b2756947f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "bytemuck_derive")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "derive")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "extern_crate_alloc")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "bytemuck_derive" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck_derive."1.3.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck_derive."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck_derive";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5fe233b960f12f8007e3db2d136e3cb1c291bfd7396e384ee76025fc1a3932b4"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.107" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "default")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".calloop."0.10.5" = overridableMkRustCrate (profileName: rec {
    name = "calloop";
    version = "0.10.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a59225be45a478d772ce015d9743e49e92798ece9e34eda9a6aa2a6a7f40192"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.25.1" { inherit profileName; };
      slotmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.6" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.38" { inherit profileName; };
      vec_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.78" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.78";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a20104e2335ce8a659d6dd92a51a767a0c062599c73b343fd152cb401e828c3d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cgmath."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "cgmath";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a98d30140e3296250832bbaaff83b27dcd6fa3cc70fb6f1f3e5c9c0023b5317"; };
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.4.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "cocoa";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f425db7937052c684daec3bd6375c8abe2d146dca4b8b143d6db777c39138f3a"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "block" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "cocoa_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "core_graphics" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "foreign_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cocoa-foundation";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ade49b65d560ca58c403a479bb396592b155c0185eada742ee323d1d68d6318"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "block" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "core_graphics_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "foreign_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "color_quant";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "core_foundation_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.22.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2581bbab3b8ffc6fcbd550bf46c355135d16e9ff2a6ea032ad6b9bf1d7efe4fb"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "core_graphics_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "foreign_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics-types";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a68b68b3446082644c91ac778bf50cd4104bfb002b5a6a7c44cca5a2c70788b"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "foreign_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features") "default")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.6" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c2dd04ddaf88237dc3b8d8f9a3c1004b506b54b3313403944054d23c0870c521"; };
    features = builtins.concatLists [
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.14" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4fb766fa798726286dbbb842f174001dab8abc7b627a1dd86e0b7222a95d929f"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cty."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "cty";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a01d95850c592940db9b8194bc39f4bc0e89dee5c4265e4b1807c34a9aba453c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "suggestions")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "darling_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "darling_macro" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.13.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "859d65a907b6852c9361e3185c862aae7fafd2887876799fa55f5f99dc40d610"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "strsim")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "suggestions")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "fnv" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "ident_case" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "strsim" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.107" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c972679f83bdf9c42bd905396b6c3588a843a17f0f16dfcfa3e2c5d57441835"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "darling_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.107" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-next."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "dirs-next";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      dirs_sys_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys-next";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "dispatch";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "dlib";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac1b7517328c04c2aa68422fc60a41b92208182142ed04a25879c26c8f878794"; };
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "downcast-rs";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".drm."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "drm";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "01406fcc6bf5180bf107c2922c8f37a875440c56a4d436b4c4cc8c09f433cc2d"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "bytemuck" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.12.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "drm_ffi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".drm-ffi."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "drm_fourcc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".drm-fourcc."2.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".drm-ffi."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "drm-ffi";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e538131f5ca07f76483b6bcdb18f540fdfe4bb0c95742f64e7d2c5649c61bca5"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "drm_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".drm-sys."0.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".drm-fourcc."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "drm-fourcc";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0aafbcdb8afc29c1a7ee5fbe53b5d62f4565b35a042a662ca9fecd0b54dae6f4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".drm-sys."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "drm-sys";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "abe573f73b81a2127a5d5989e12a4ea4a4dab7800e53c73c663494d6c342a338"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "errno";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f639046355ee4f37944e44f60642c6f3a7efa3cf6b78c78a0d989a8ce6c396a1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "std")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") && hostPlatform.parsed.kernel.name == "dragonfly" then "errno_dragonfly" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno-dragonfly."0.1.2" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "hermit" || hostPlatform.parsed.kernel.name == "wasi") then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno-dragonfly."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "errno-dragonfly";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.78" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a7a407cfaa3385c4ae6b23e84623d48c2798d06e3e6a1878f7f59f17b3f86499"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "instant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.25" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8a2db397cb1c8772f31494cb8917e48cd1e64f0fa7efac59fbd741a0a8ce841"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features") "default")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features") "miniz_oxide")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features") "rust_backend")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features" then "crc32fast" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features" then "miniz_oxide" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".float-cmp."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "float-cmp";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1267f4ac4f343772758f7b1bdcbe767c218bbab93bb432acbf5162bbf85a6c4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") "default")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") "num-traits")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") "ratio")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features" then "num_traits" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "foreign_types_shared" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fps_ticker."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "fps_ticker";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe164905ff69757d4bdc4c61d7df2930e47e2f5b4a132895a8f995990b2b9219"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gbm."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "gbm";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f388f2b6aa25fbf6730726f714b3c8653b05e529defc63589d3be945df431897"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "drm")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "drm-support")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "drm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".drm."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "drm_fourcc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".drm-fourcc."2.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "gbm_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gbm-sys."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gbm-sys."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "gbm-sys";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c366578b2e6e7caf75f1a17e64f026dddf814d39844e77e7857a4106232c7e15"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gethostname."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "gethostname";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1ebd34e35c46e00bb73e81363248d627782724609fe1b6396f553f68fe3862e"; };
    dependencies = {
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") && !hostPlatform.isWindows then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gl_generator."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "gl_generator";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a95dfc23a2b4a9a2f5ab41d194f8bfda3cabec42af4e39f08c339eb2a0c124d"; };
    dependencies = {
      khronos_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".khronos_api."3.1.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888"; };
    features = builtins.concatLists [
      [ "raw" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ident_case";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".image."0.24.5" = overridableMkRustCrate (profileName: rec {
    name = "image";
    version = "0.24.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "69b7ea949b537b0fd0af141fff8c77690f2ce96f4f41f042ccb6c69c6c965945"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features") "png")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "bytemuck" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.12.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "color_quant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "num_rational" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "num_traits" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features" then "png" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".png."0.17.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.2" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1885e79c1fc4b10f0e172c475f458b7f7b93061064d98c3293e98c5ba0c8b399"; };
    dependencies = {
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".input."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "input";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f95640ef27dac9b23ef1fbd760c67a88ce3cab2143a2c18390e71f39c53b815f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "libinput_1_11")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "libinput_1_14")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "udev")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "input_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".input-sys."1.16.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "udev" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".udev."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".input-sys."1.16.1" = overridableMkRustCrate (profileName: rec {
    name = "input-sys";
    version = "1.16.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e09d849da95ebb5d091c600f6cdae5193077995f1e9095c16a5bb4f84b561933"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "libinput_1_11")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "libinput_1_14")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "js-sys")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "wasm-bindgen")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "wasm-bindgen_rs")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "web-sys")
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown") then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.60" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown") then "wasm_bindgen_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.83" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown") then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.60" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "io-lifetimes";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46112a93252b123d31a119a8d1a1ac19deac4fac6e0e8b0df58f0d4e5870e63c"; };
    features = builtins.concatLists [
      [ "close" ]
      [ "default" ]
      [ "libc" ]
      [ "windows-sys" ]
    ];
    dependencies = {
      ${ if !hostPlatform.isWindows then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.42.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fad582f4b9e86b6caa621cabeb0963332d92eea04729ab12892c2533951e6440"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jni-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.60" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.60";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49409df3e3bf0856b916e2ceaca09ee28e6871cf7d9ce97a692cacfdb2a25a47"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.83" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".khronos_api."3.1.0" = overridableMkRustCrate (profileName: rec {
    name = "khronos_api";
    version = "3.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2db585e1d738fc771bf08a151420d3ed193d9d895a36df7f6f8a9456b911ddc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.139";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "extra_traits" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libseat."0.1.7" = overridableMkRustCrate (profileName: rec {
    name = "libseat";
    version = "0.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "845e5c255462c9bc7c71c17b996766b76e3c66f2ddd5846bfbc83f18382aa648"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "cc")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "custom_logger")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "pkg-config")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "errno" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.2.8" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "libseat_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libseat-sys."0.1.7" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "slog" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog."2.7.0" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.78" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libseat-sys."0.1.7" = overridableMkRustCrate (profileName: rec {
    name = "libseat-sys";
    version = "0.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3671cb5e03871f1d6bf0b3b5daa9275549e348fa6359e0f9adb910ca163d4c34"; };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libudev-sys."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "libudev-sys";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c8469b4a23b962c1396b9b451dda50ef5b283e8dd309d69033475fa9b334324"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "scopeguard" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "autocfg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" = overridableMkRustCrate (profileName: rec {
    name = "malloc_buf";
    version = "0.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.8" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.5.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4b182332558b18d807c4ce1ca8ca983b34c3ee32765e47b3f0f69b90355cc1dc"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5de893c32cde5f383baa4c04c5d6dbdd735cfd4a794b0debdb2bb1b421da5ff4"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/xcursor") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features") "default")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features") "with-alloc")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features" then "adler" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5d732bc30207a6423068df043e3d02e0735b155ad7ce1a6f76fe2baa5b158de"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "os-ext")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "os-poll")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi") then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.42.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "451422b7e4718271c8b5b3aadf5adedba43dc76312454b387e98fae0fc951aa0"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "jni_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "ffi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "num_enum" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.7" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.38" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk-context";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-glue";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0434fabdd2c15e0aab768ca31d5b7b333717f03cf02037d5a0a3ff3c278ed67f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "ndk_context" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "ndk_macro" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.3.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "ndk_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.17.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-macro";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0df7ac00c4672f9d5aece54ee3347520b7e20f158656c7db2e6de01902eb7a6c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "darling" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.13.4" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "proc_macro_crate" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.107" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" = overridableMkRustCrate (profileName: rec {
    name = "ndk-sys";
    version = "0.4.1+23.1.7779620";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3cf2aae958bd232cac5069850591667ad422d263686d75b52a065f9badeee5a3"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "jni_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.24.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa52e972a9a719cecb6864fb88568781eb706bac2cd1d4f04a648542dbf78069"; };
    features = builtins.concatLists [
      [ "acct" ]
      [ "aio" ]
      [ "default" ]
      [ "dir" ]
      [ "env" ]
      [ "event" ]
      [ "feature" ]
      [ "fs" ]
      [ "hostname" ]
      [ "inotify" ]
      [ "ioctl" ]
      [ "kmod" ]
      [ "memoffset" ]
      [ "mman" ]
      [ "mount" ]
      [ "mqueue" ]
      [ "net" ]
      [ "personality" ]
      [ "poll" ]
      [ "process" ]
      [ "pthread" ]
      [ "ptrace" ]
      [ "quota" ]
      [ "reboot" ]
      [ "resource" ]
      [ "sched" ]
      [ "signal" ]
      [ "socket" ]
      [ "term" ]
      [ "time" ]
      [ "ucontext" ]
      [ "uio" ]
      [ "user" ]
      [ "zerocopy" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.25.1" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.25.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f346ff70e7dbfd675fe90590b92d59ef2de15a8779ae305ebcbfd3f0caf59be4"; };
    features = builtins.concatLists [
      [ "event" ]
      [ "fs" ]
      [ "memoffset" ]
      [ "process" ]
      [ "signal" ]
      [ "socket" ]
      [ "time" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.26.1" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.26.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46a58d1d356c6597d08cde02c2f09d785b09e28711837b1ed667dc652c08a694"; };
    features = builtins.concatLists [
      [ "event" ]
      [ "fs" ]
      [ "memoffset" ]
      [ "poll" ]
      [ "socket" ]
      [ "uio" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.7.1" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.1" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8903e5a29a317527874d0402f867152a3d21c908bb0b933e416c65e301d4c36"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/xcursor") "alloc")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/xcursor") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/xcursor") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/xcursor" then "memchr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/xcursor" then "minimal_lexical" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.45" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.45";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "i128")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "num_traits" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "autocfg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "num-rational";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0638a1c9d0a3c0914158145bc76cff373a75a627e6ecbfb71cbe6f453a5a19b0"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "num_integer" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.45" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "num_traits" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "autocfg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd"; };
    features = builtins.concatLists [
      [ "default" ]
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "i128")
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "num_enum";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf5395665662ef45796a4ff5486c5d41d29e0c09640af4c5f17fd94ee2c119c9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "num_enum_derive" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.7" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "num_enum_derive";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b0498641e53dd6ac1a4f22547548caa6864cc4933784319cd1775271c5a46ce"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "proc-macro-crate")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "proc_macro_crate" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.107" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_threads."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "num_threads";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2819ce041d2ee131036f4fc9d6ae7ae125a3a40e97ba64d04fe799ad9dabbb44"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "objc";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "malloc_buf" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.17.0" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f61fba1741ea2b3d6a1e3178721804bb716a68a6aeba1149b5d52e3d464ea66"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "race" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "lock_api" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.9" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "parking_lot_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.5" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.9.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ff9f3fef3968a3ec5945535ed654cb38ff72d7495a25619e2247fb15a2ed9ba"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.42.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "478c572c3d73181ff3c2539045f6eb99e5491218eae919370993b890cdbdd98e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "alloc")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.26";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ac9a59f73473f1b8d852421e59e64809f025994837ef743615c6d0c5b305160"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".png."0.17.7" = overridableMkRustCrate (profileName: rec {
    name = "png";
    version = "0.17.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d708eaf860a19b19ce538740d2b4bdeeb8337fa53f7738455e706623ad5c638"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features" then "crc32fast" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features" then "flate2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.25" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features" then "miniz_oxide" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eda0fc3b0fb7c975631757e14d9049da17374063edb6ebbcbc54d880d4fe94e9"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.17.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.38" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "toml" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.49";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57a8eca9f9c4ffde41714334dee777596264c7825420f521abc92b5b5deb63a5"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_ident = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.23.1" = overridableMkRustCrate (profileName: rec {
    name = "quick-xml";
    version = "0.23.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11bafc859c6815fbaffbbbf4229ecb767ac913fecb27f9ad4343662e9ef099ea"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      rand_chacha = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b800beb9b6e7d2df1fe337c9e3d04e3af22a124460fb4c30fcc22c9117cefb41"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "cty" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cty."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed7e3d950b66e19e0c372f3fa3fbbcf85b1746b571f74e0c2af6042a5c93420a"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "cty" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cty."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.2.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "redox_users";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b"; };
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.8" { inherit profileName; };
      syscall = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.38" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "remove_dir_all";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".renderdoc."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "renderdoc";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b42e14087d51efd3b42eb341e37b6f320af2b0750519ea849cb68bb7289643ed"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features" then "float_cmp" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".float-cmp."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.17.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features" then "renderdoc_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".renderdoc-sys."0.7.1" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") && hostPlatform.isWindows then "wio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wio."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".renderdoc-sys."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "renderdoc-sys";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1382d1f0a252c4bf97dc20d979a2fdd05b024acd7c2ed0f7595d7817666a157"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.11" = overridableMkRustCrate (profileName: rec {
    name = "rustversion";
    version = "1.0.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5583e89e108996506031660fe09baa5011b9dd0341b89029313006d1fb508d70"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scan_fmt."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "scan_fmt";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b53b0a5db882a8e2fdaae0a43f7b39e7e9082389e978398bdf223a55b581248"; };
  });
  
  "unknown".scape."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "scape";
    version = "0.0.1";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/test_all_features") "debug")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "egl")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/fps_ticker" || rootFeatures' ? "scape/test_all_features") "fps_ticker")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "image")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") "renderdoc")
      (lib.optional (rootFeatures' ? "scape/test_all_features") "test_all_features")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "udev")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "winit")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "x11")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "x11rb")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/xcursor") "xcursor")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/xwayland") "xwayland")
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/fps_ticker" || rootFeatures' ? "scape/test_all_features" then "fps_ticker" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fps_ticker."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/default" || rootFeatures' ? "scape/image" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "image" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".image."0.24.5" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features" then "renderdoc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".renderdoc."0.10.1" { inherit profileName; };
      slog = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog."2.7.0" { inherit profileName; };
      slog_async = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog-async."2.7.0" { inherit profileName; };
      slog_scope = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog-scope."4.4.0" { inherit profileName; };
      slog_stdlog = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog-stdlog."4.1.1" { inherit profileName; };
      slog_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog-term."2.9.0" { inherit profileName; };
      smithay = rustPackages."git+https://github.com/smithay/smithay".smithay."0.3.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.38" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland" then "x11rb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11rb."0.10.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/xcursor" then "xcursor" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.4" { inherit profileName; };
      xkbcommon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xkbcommon."0.5.0" { inherit profileName; };
    };
    buildDependencies = {
      gl_generator = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".gl_generator."0.14.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "scoped-tls";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.152" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.152";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb"; };
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slog."2.7.0" = overridableMkRustCrate (profileName: rec {
    name = "slog";
    version = "2.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8347046d4ebd943127157b94d63abb990fcf729dc4e9978927fdf4ac3c998d06"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slog-async."2.7.0" = overridableMkRustCrate (profileName: rec {
    name = "slog-async";
    version = "2.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "766c59b252e62a34651412870ff55d8c4e6d04df19b43eecb2703e417b097ffe"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.6" { inherit profileName; };
      slog = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog."2.7.0" { inherit profileName; };
      take_mut = rustPackages."registry+https://github.com/rust-lang/crates.io-index".take_mut."0.2.2" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slog-scope."4.4.0" = overridableMkRustCrate (profileName: rec {
    name = "slog-scope";
    version = "4.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2f95a4b4c3274cd2869549da82b57ccc930859bdbf5bcea0424bc5f140b3c786"; };
    dependencies = {
      arc_swap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.6.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      slog = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog."2.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slog-stdlog."4.1.1" = overridableMkRustCrate (profileName: rec {
    name = "slog-stdlog";
    version = "4.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6706b2ace5bbae7291d3f8d2473e2bfab073ccd7d03670946197aec98471fa3e"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      slog = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog."2.7.0" { inherit profileName; };
      slog_scope = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog-scope."4.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slog-term."2.9.0" = overridableMkRustCrate (profileName: rec {
    name = "slog-term";
    version = "2.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87d29185c55b7b258b4f120eab00f48557d4d9bc814f41713f449d35b0f8977c"; };
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      slog = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog."2.7.0" { inherit profileName; };
      term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".term."0.7.0" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.17" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "slotmap";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1e08e261d0e8f5c43123b7adf3e4ca1690d655377ac93a03b2c9d3e98de1342"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0"; };
    features = builtins.concatLists [
      [ "const_generics" ]
      [ "const_new" ]
      [ "union" ]
    ];
  });
  
  "git+https://github.com/smithay/smithay".smithay."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "smithay";
    version = "0.3.0";
    registry = "git+https://github.com/smithay/smithay";
    src = fetchCrateGit {
      url = https://github.com/smithay/smithay;
      name = "smithay";
      version = "0.3.0";
      rev = "c85e1e520d14aaaadff1369bcbf88ea8204c0827";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "backend_drm")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/x11") "backend_egl")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "backend_gbm")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "backend_libinput")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "backend_session")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "backend_session_libseat")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "backend_udev")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "backend_winit")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "backend_x11")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "cc")
      [ "desktop" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "drm")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "drm-ffi")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "gbm")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/x11") "gl_generator")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "input")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/x11") "libloading")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "libseat")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11") "pkg-config")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/x11") "renderer_gl")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "renderer_multi")
      [ "slog-stdlog" ]
      [ "tempfile" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "udev")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "use_system_lib")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "wayland-backend")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "wayland-egl")
      [ "wayland-protocols" ]
      [ "wayland-server" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "wayland-sys")
      [ "wayland_frontend" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "winit")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/xwayland") "x11rb")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/xwayland") "x11rb_event_source")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/xwayland") "xwayland")
    ];
    dependencies = {
      appendlist = rustPackages."registry+https://github.com/rust-lang/crates.io-index".appendlist."1.4.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      calloop = rustPackages."registry+https://github.com/rust-lang/crates.io-index".calloop."0.10.5" { inherit profileName; };
      cgmath = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cgmath."0.18.0" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "drm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".drm."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "drm_ffi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".drm-ffi."0.3.0" { inherit profileName; };
      drm_fourcc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".drm-fourcc."2.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "gbm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gbm."0.9.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "input" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".input."0.7.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/x11" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "libseat" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libseat."0.1.7" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.17.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      scan_fmt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scan_fmt."0.2.6" { inherit profileName; };
      slog = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog."2.7.0" { inherit profileName; };
      slog_stdlog = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slog-stdlog."4.1.1" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.38" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "udev" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".udev."0.6.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" then "wayland_backend" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_egl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-egl."0.30.0" { inherit profileName; };
      wayland_protocols = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.30.0" { inherit profileName; };
      wayland_protocols_misc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols-misc."0.1.0" { inherit profileName; };
      wayland_protocols_wlr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols-wlr."0.1.0" { inherit profileName; };
      wayland_server = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-server."0.30.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" then "wayland_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.30.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "winit" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.27.5" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/xwayland" then "x11rb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11rb."0.10.1" { inherit profileName; };
      xkbcommon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xkbcommon."0.5.0" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.78" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/x11" then "gl_generator" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".gl_generator."0.14.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/x11" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "smithay-client-toolkit";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f307c47d32d2715eb2e0ece5589057820e0e5e70d07c247d1063e844e107f454"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "calloop")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "dlopen")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "calloop" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".calloop."0.10.5" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "dlib" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "memmap2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.8" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_client" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_cursor" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.29.5" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_protocols" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.29.5" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "static_assertions";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.107" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.107";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "extra-traits")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "full")
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "visit")
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      unicode_ident = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".take_mut."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "take_mut";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" = overridableMkRustCrate (profileName: rec {
    name = "tempfile";
    version = "3.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.8.0" { inherit profileName; };
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" { inherit profileName; };
      remove_dir_all = rustPackages."registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".term."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "term";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      dirs_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-next."2.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "rustversion" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.11" { profileName = "__noProfile"; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.38" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.38";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a9cd18aa97d5c45c6603caea1da6628790b37f7a34b6ca89522331c5180fed0"; };
    dependencies = {
      thiserror_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.38" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.38" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.38";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1fb327af4685e4d03fa8cbcf1716380da910eeb2bb8be417e7f9fd3fb164f36f"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.107" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" = overridableMkRustCrate (profileName: rec {
    name = "thread_local";
    version = "1.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180"; };
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.17.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time."0.3.17" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.3.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a561bf4617eebd33bca6434b988f39ed798e527f51a1e797d0ee4f61c0a38376"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "formatting" ]
      [ "local-offset" ]
      [ "macros" ]
      [ "std" ]
    ];
    dependencies = {
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.5" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if hostPlatform.isUnix then "num_threads" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_threads."0.1.6" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.152" { inherit profileName; };
      time_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.0" { inherit profileName; };
      time_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.6" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "time-core";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e153e1f1acaef8acc537e68b44906d2db6436e2b35ac2c6b42640fff91f00fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "time-macros";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d967f99f534ca7e495c575c62638eebc2898a8c84c119b89e250477bc4ba16b2"; };
    features = builtins.concatLists [
      [ "formatting" ]
    ];
    dependencies = {
      time_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.5.10" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.5.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1333c76748e868a4d9d1017b5ab53171dfd095f70c712fdb4653a406547f598f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.152" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".udev."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "udev";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1c960764f7e816eed851a96c364745d37f9fe71a2e7dba79fbd40104530b5dd0"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "libudev_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libudev-sys."0.1.4" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "unicode-ident";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "vec_map";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.11.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.83" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.83";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eaf9f5aceeec8be17c128b2e93e031fb8a4d469bb9c4ae2d7dc1888b26887268"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "spans")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wasm_bindgen_macro" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.83" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.83" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.83";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c8ffb332579b0557b52d268b91feab8df3615f265d5270fec2a8c95b17c1142"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "spans")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bumpalo" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.11.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.17.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.107" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wasm_bindgen_shared" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.83" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.83" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.83";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "052be0f94026e6cbc75cdefc9bae13fd6052cdcaf532fa6c45e7ae33a1e6c810"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "spans")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wasm_bindgen_macro_support" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.83" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.83" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.83";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "07bc0c051dc5f23e307b13285f9d75df86bfdf816c5721e573dec1f9b8aa193c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "spans")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.107" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wasm_bindgen_backend" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.83" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wasm_bindgen_shared" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.83" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.83" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.83";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1c38c045535d93ec4f0b4defec448e4291638ee608530863b1e2ba115d4fff7f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "wayland-backend";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb23bfea266c92bb051ea36cce0eb1a52b743dc1c5f168021947eda79764656d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "client_system")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "server_system")
    ];
    dependencies = {
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      io_lifetimes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."1.0.3" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.26.1" { inherit profileName; };
      scoped_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.1" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      wayland_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.30.1" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.78" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-client";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f3b068c05a039c9f755f881dc50f01732214f5685e379829759088967c46715"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "dlopen")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "scoped-tls")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "use_system_lib")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "downcast_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "scoped_tls" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_commons" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.5" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.29.5" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_scanner" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.5" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-commons";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8691f134d584a33a6606d9d717b95c4fa20065605f798a3f350d78dced02a902"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.17.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.29.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-cursor";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6865c6b66f13d6257bef1cd40cbfe8ef2f150fb8ebbdb1e8e873455931377661"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_client" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "xcursor" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-egl."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "wayland-egl";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1187695fe81c3153c3163f9d2953149f638c5d7dbc6fe988914ca3f4961e28ed"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_backend" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.30.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b950621f9354b322ee817a23474e479b34be96c2e909c14f7bc0100e9a970bc6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "client")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "staging_protocols")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "unstable_protocols")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "wayland-client")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_client" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_commons" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.5" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wayland_scanner" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.5" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fefbeb8a360abe67ab7c2efe1d297a1a50ee011f5460791bc18870c26bb84e2"; };
    features = builtins.concatLists [
      [ "server" ]
      [ "staging" ]
      [ "unstable" ]
      [ "wayland-server" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      wayland_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.1.0" { inherit profileName; };
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.30.0" { profileName = "__noProfile"; };
      wayland_server = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-server."0.30.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols-misc."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols-misc";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "897d4e99645e1ed9245e9e6b5efa78828d2b23b661016d63d55251243d812f8b"; };
    features = builtins.concatLists [
      [ "server" ]
      [ "wayland-server" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      wayland_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.1.0" { inherit profileName; };
      wayland_protocols = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.30.0" { inherit profileName; };
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.30.0" { profileName = "__noProfile"; };
      wayland_server = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-server."0.30.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols-wlr."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols-wlr";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fce991093320e4a6a525876e6b629ab24da25f9baef0c2e0080ad173ec89588a"; };
    features = builtins.concatLists [
      [ "server" ]
      [ "wayland-server" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      wayland_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.1.0" { inherit profileName; };
      wayland_protocols = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.30.0" { inherit profileName; };
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.30.0" { profileName = "__noProfile"; };
      wayland_server = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-server."0.30.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-scanner";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f4303d8fa22ab852f789e75a967f0a2cdc430a607751c0499bada3e451cbd53"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "xml" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "wayland-scanner";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4834c14b3edf1d9986c83ca79b1e7e3afbe9874c7c144702f6467063259ce45d"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.49" { inherit profileName; };
      quick_xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.23.1" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.23" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-server."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "wayland-server";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9062def387c1b1d80e366d8243c2b3bd6d9e4f343032a3e5da8d4aa03866cf89"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      io_lifetimes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."1.0.3" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.26.1" { inherit profileName; };
      wayland_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.1.0" { inherit profileName; };
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.30.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-sys";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be12ce1a3c39ec7dba25594b97b42cb3195d54953ddb9d3d95a7c3902bc6e9d4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "client")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "dlib")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "dlopen")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "lazy_static")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "dlib" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.30.1" = overridableMkRustCrate (profileName: rec {
    name = "wayland-sys";
    version = "0.30.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96b2a02ac608e07132978689a6f9bf4214949c85998c247abadd4f4129b1aa06"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "client")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "egl")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "libc")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "memoffset")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "server")
    ];
    dependencies = {
      dlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/egl" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" then "memoffset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.7.1" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.60" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.60";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bcda906d8be16e728fd5adc5b729afad4e444e106ab28cd1c7256e54fa61510f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "AddEventListenerOptions")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "BeforeUnloadEvent")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "CssStyleDeclaration")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Document")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "DomRect")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "DomRectReadOnly")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Element")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Event")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "EventTarget")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "FocusEvent")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "HtmlCanvasElement")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "HtmlElement")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "KeyboardEvent")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "MediaQueryList")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "MediaQueryListEvent")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "MouseEvent")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Node")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Performance")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "PerformanceTiming")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "PointerEvent")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "UiEvent")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "WheelEvent")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Window")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "console")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.60" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.83" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      [ "consoleapi" ]
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") "d3d11")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") "d3d12")
      [ "errhandlingapi" ]
      [ "fileapi" ]
      [ "handleapi" ]
      [ "knownfolders" ]
      [ "libloaderapi" ]
      [ "minwinbase" ]
      [ "minwindef" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev") "ntdef")
      [ "objbase" ]
      [ "processenv" ]
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") "processthreadsapi")
      [ "shlobj" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "sysinfoapi")
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") "unknwnbase")
      [ "winbase" ]
      [ "wincon" ]
      [ "winerror" ]
      (lib.optional (rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features") "winnt")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "winsock2")
    ];
    dependencies = {
      ${ if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-wsapoll."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "winapi-wsapoll";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44c17110f57155602a80dca10be03852116403c9ff3cd25b079d666f2aa3df6e"; };
    dependencies = {
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_Devices")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_Devices_HumanInterfaceDevice")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_Foundation")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_Globalization")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_Graphics")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_Graphics_Dwm")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_Graphics_Gdi")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_Media")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_Com")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_Com_StructuredStorage")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_LibraryLoader")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_Ole")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_SystemInformation")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_SystemServices")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_Threading")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_WindowsProgramming")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_Accessibility")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_Controls")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_HiDpi")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_Input")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_Input_Ime")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_Input_KeyboardAndMouse")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_Input_Pointer")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_Input_Touch")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_Shell")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_TextServices")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_UI_WindowsAndMessaging")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "default")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.config == "aarch64-pc-windows-msvc" || hostPlatform.config == "aarch64-uwp-windows-msvc") then "windows_aarch64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.36.1" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.config == "i686-pc-windows-gnu" || hostPlatform.config == "i686-uwp-windows-gnu") then "windows_i686_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.36.1" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.config == "i686-pc-windows-msvc" || hostPlatform.config == "i686-uwp-windows-msvc") then "windows_i686_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.36.1" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.config == "x86_64-pc-windows-gnu" || hostPlatform.config == "x86_64-uwp-windows-gnu") then "windows_x86_64_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.36.1" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.config == "x86_64-pc-windows-msvc" || hostPlatform.config == "x86_64-uwp-windows-msvc") then "windows_x86_64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.36.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.42.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.42.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "Win32_Security" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      [ "Win32_System_IO" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_LibraryLoader")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_Pipes")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_SystemServices")
      [ "Win32_System_Threading" ]
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "Win32_System_WindowsProgramming")
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.42.0" { inherit profileName; };
      ${ if hostPlatform.config == "aarch64-pc-windows-msvc" || hostPlatform.config == "aarch64-uwp-windows-msvc" then "windows_aarch64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.42.0" { inherit profileName; };
      ${ if hostPlatform.config == "i686-pc-windows-gnu" || hostPlatform.config == "i686-uwp-windows-gnu" then "windows_i686_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.42.0" { inherit profileName; };
      ${ if hostPlatform.config == "i686-pc-windows-msvc" || hostPlatform.config == "i686-uwp-windows-msvc" then "windows_i686_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.42.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" || hostPlatform.config == "x86_64-uwp-windows-gnu" then "windows_x86_64_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.42.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.42.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-msvc" || hostPlatform.config == "x86_64-uwp-windows-msvc" then "windows_x86_64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.42.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.42.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.42.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "41d2aa71f6f0cbe00ae5167d90ef3cfe66527d6f613ca78ac8024c3ccab9a19e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.42.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.42.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd0f252f5a35cac83d6311b2e795981f5ee6e67eb1f9a7f64eb4500fbc4dcdb4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.42.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.42.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fbeae19f6716841636c28d695375df17562ca208b2b7d0dc47635a50ae6c5de7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.42.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.42.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "84c12f65daa39dd2babe6e442988fc329d6243fdce47d7d2d155b8d874862246"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.42.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.42.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bf7b1b21b5362cbc318f686150e5bcea75ecedc74dd157d874d754a2ca44b0ed"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.42.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.42.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "09d525d2ba30eeb3297665bd434a54297e4170c7f1a44cad4ef58095b4cd2028"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.42.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.42.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winit."0.27.5" = overridableMkRustCrate (profileName: rec {
    name = "winit";
    version = "0.27.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb796d6fbd86b2fd896c9471e6f04d39d750076ebe5680a3958f00f5ab97657c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "mio")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "parking_lot")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "percent-encoding")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "sctk")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "wayland")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "wayland-client")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "wayland-dlopen")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "wayland-protocols")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "x11")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") "x11-dl")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.kernel.name == "darwin" then "cocoa" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.1" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.kernel.name == "darwin" then "core_graphics" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.kernel.name == "darwin" then "dispatch" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "instant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.5" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.7.0" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.17.0" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "windows") then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "percent_encoding" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "raw_window_handle_04" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.4.3" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.0" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "sctk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.16.0" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.83" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "wayland_client" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "wayland_protocols" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.29.5" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.60" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "x11_dl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.20.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wio."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "wio";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d129932f4644ac2396cb456385cbf9e63b5b30c6e8dc4820bdca4eb082037a5"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/debug" || rootFeatures' ? "scape/renderdoc" || rootFeatures' ? "scape/test_all_features" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.20.1" = overridableMkRustCrate (profileName: rec {
    name = "x11-dl";
    version = "2.20.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1536d6965a5d4e573c7ef73a2c15ebcd0b2de3347bdf526c34c297c00ac40f0"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/winit" then "pkg_config" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11rb."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "x11rb";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "592b4883219f345e712b3209c62654ebda0bb50887f330cbd018d0f654bfd507"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "composite")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "dri3")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "present")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "randr")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "render")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "shape")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "sync")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "xfixes")
    ];
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland" then "gethostname" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gethostname."0.2.3" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") && hostPlatform.isUnix then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") && hostPlatform.isWindows then "winapi_wsapoll" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-wsapoll."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland" then "x11rb_protocol" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11rb-protocol."0.10.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11rb-protocol."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "x11rb-protocol";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56b245751c0ac9db0e006dc812031482784e434630205a93c73cfefcaabeac67"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "composite")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "default")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "dri3")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "nix")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "present")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "randr")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "render")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "shape")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "std")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11") "sync")
      (lib.optional (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") "xfixes")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/x11" || rootFeatures' ? "scape/x11rb" || rootFeatures' ? "scape/xwayland") && hostPlatform.isUnix then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "xcursor";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "463705a63313cd4301184381c5e8042f0a7e9b4bb63653f216311d4ae74690b7"; };
    dependencies = {
      ${ if rootFeatures' ? "scape/default" || rootFeatures' ? "scape/test_all_features" || rootFeatures' ? "scape/udev" || rootFeatures' ? "scape/winit" || rootFeatures' ? "scape/xcursor" then "nom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xkbcommon."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "xkbcommon";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "acbee136714379ab22da0280207fdb7f47e0bb940adea97731b65598b8c7a92e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "memmap2" ]
      [ "wayland" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.139" { inherit profileName; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "xml-rs";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2d7d3948613f75c98fd9328cfdcc45acc4d360655289d0a7d4ec931392200a3"; };
  });
  
}
